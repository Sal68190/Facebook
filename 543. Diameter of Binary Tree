/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
  int diameter;
public:
    int longestPath(TreeNode* node){
       if (node==NULL)
           return 0;

        // recursively find the longest path in both left child and right child
        int left_path=longestPath(node->left);
        int right_path=longestPath(node->right);
        
        // update the diameter if left_path plus right_path is larger
         diameter=max(diameter, left_path+right_path);

        // return the longest one between left_path and right_path; 
        // remember to add 1 for the path connecting the node and its parent
          return max(left_path, right_path) + 1;

    }

    int diameterOfBinaryTree(TreeNode* root) {
      diameter = 0;
        longestPath(root);
       return diameter;
    }
};
