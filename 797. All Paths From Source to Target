class Solution {
private:
    vector<vector<int>> ans;    //Result vector
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<int> currPath;  
        solve(graph, currPath, 0);  //Always starting from node 0
        
        return ans;
    }
    
    void solve(vector<vector<int>> &graph, vector<int> &path, int i){
        path.push_back(i);   //Add the node to the currentPath
        if(i==graph.size()-1) ans.push_back(path);   //If we've reached the last node, add the current path to the result vector
        
        for(auto adj : graph[i]) solve(graph, path, adj); //Traversing the graph in DFS manner
        
        path.pop_back();  //Backtracking
    }
};
